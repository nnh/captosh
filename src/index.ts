import { app, ipcMain, dialog, BrowserWindow, Menu, MenuItem, MenuItemConstructorOptions } from 'electron';
import * as fs from 'fs'
import { writeFile } from 'node:fs/promises';
import * as path from 'node:path';
import { customSchemeRegExp } from './js/scheme';
import { captureCaptoshLink } from './js/capture-captosh-link';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow|undefined = undefined;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webviewTag: true
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.on('closed', () => {
    mainWindow = undefined;
  });
  const template: (MenuItemConstructorOptions | MenuItem)[] = [
    {
      label: 'Application',
      submenu: [
        {
          label: '終了',
          accelerator: 'Command+Q',
          click: () => {
            app.quit();
          }
        }
      ]
    },
    {
      label: '編集',
      submenu: [
        {
          label: '取り消す',
          accelerator: 'CmdOrCtrl+Z',
          role: 'undo'
        },
        {
          label: 'やり直す',
          accelerator: 'Shift+CmdOrCtrl+Z',
          role: 'redo'
        },
        {
          type: 'separator'
        },
        {
          label: '切り取り',
          accelerator: 'CmdOrCtrl+X',
          role: 'cut'
        },
        {
          label: 'コピー',
          accelerator: 'CmdOrCtrl+C',
          role: 'copy'
        },
        {
          label: '貼り付け',
          accelerator: 'CmdOrCtrl+V',
          role: 'paste'
        },
        {
          label: 'すべてを選択',
          accelerator: 'CmdOrCtrl+A',
          role: 'selectAll'
        }
      ]
    },
    {
      label: '表示',
      submenu: [
        { role: 'toggleDevTools' },
      ]
    }
  ];
  Menu.setApplicationMenu(Menu.buildFromTemplate(template));
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
const lock = app.requestSingleInstanceLock();
if (lock) {
  app.on('second-instance', (_event, commandLine, _workingDirectory) => {
    if (mainWindow) {
      if (mainWindow.isMinimized()) {
        mainWindow.restore();
      }
      mainWindow.focus();

      // for Windows
      commandLine.forEach(checkCustomScheme);
    }
  });

  app.on('ready', createWindow);
} else {
  app.quit();
}

app.whenReady().then(() => {
  ipcMain.handle('select-folder', async () => {
    const bw = BrowserWindow.getFocusedWindow();
    if (bw) {
      const result = await dialog.showOpenDialog(bw, {
        properties: ['openDirectory']
      });
      if (result.filePaths[0]) {
        return result.filePaths[0];
      } else {
        return undefined;
      }
    }
  });
  ipcMain.handle('show-dialog', async (_e, message: string) => {
    alert(message);
  });
  ipcMain.handle('get-root-directory', async (_e) => {
    const folderText = process.env[process.platform === "win32" ? "USERPROFILE" : "HOME"] ?? '';
    return folderText;
  });
  ipcMain.handle('write-file', async (_e, pathStr: string, data: Uint8Array) => {
    const dir = path.dirname(pathStr)
    fs.mkdirSync(dir, { recursive: true })
    writeFile(pathStr, data);
  });
  ipcMain.handle('capture-captosh-link', async (_e, captoshUrl: string, protocol: 'http:' | 'https:') => {
    return await captureCaptoshLink(captoshUrl, protocol);
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (!mainWindow) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
app.on('will-finish-launching', () => {
  // for OSX
  app.on('open-url', (_event, url) => {

    checkCustomScheme(url);
  });

  // for Windows
  process.argv.forEach(checkCustomScheme);
});

function checkCustomScheme(url: string) {
  if (customSchemeRegExp.test(url) && mainWindow && mainWindow.webContents) {
    mainWindow.webContents.send('capture-request', url);
  }
}
